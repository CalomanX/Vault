@startuml
title How to get a Secret
start
:input ProfileKey, ScopeKey and SecretKey<
if (params are valid?) then (no)
    #red:(E)
    detach
endif
: Generate the UserProfileKey from the ProfileKey|

:Seek lockers for lock with key = ProfileKey;
if (lock do exist?) then (no)
   #red:(E)
   kill
     
endif

: Decipher the Lock with 
ChaChaPoly1035 (
    key: ProfileKey, 
    Nonce: Lockers.Index[ProfileKey].Hash, 
    Aead: UserSystemKey
    ) |
if (Error?) then (yes)
    #red:(E)
    kill
endif

: With the Lock.Profile.TargetId get the ciphered Profile record;
if (Record exists?) then (no)
    #red:(E)
    kill
endif


: Decipher the Profile with 
ChaChaPoly1035(
    key: ProfileKey, 
    Nonce: Lock.Profile.Hash, 
    Aead: UserSystemKey)|
    
if (Error?) then (yes)
    #red:(E)
    kill
endif

: Validate the ProfileKey with argon2::verify_password(ProfileKey, Profile.PHC);
if (Error or Invalid?) then (yes)
    #red:(E)
    kill
endif

: Seek Profile.Scopes for the Scope with key = ScopeKey;
if (Record exists?) then (no)
    #red:(E)
    kill
endif

: Decipher the Scope with 
ChaChaPoly1035(
    key: ScopeKey, 
    Nonce: Profile.Scopes[x].Hash, 
    Aead: UserSystemKey)|
end
if (Error?) then (yes)
    #red:(E)
    kill
endif

: Validate the ScopeKey with argon2::verify_password(ScopeKey, Scope.PHC);
if (Error or Invalid?) then (yes)
    #red:(E)
    kill
endif

: Seek Scope.Secrets for the Secret with key = SecretKey;
if (Record exists?) then (no)
    #red:(E)
    kill
endif

: Decipher the Secret with 
ChaChaPoly1035(
    key: SecretKey, 
    Nonce: Scope.Secrets[x].Hash, 
    Aead: UserSystemKey)|
end
if (Error?) then (yes)
    #red:(E)
    kill
endif

: Validate the SecretKey with argon2::verify_password(SecretKey, Secret.PHC);
if (Error or Invalid?) then (yes)
    #red:(E)
    kill
endif

: Return the Secrete values as a byte[] >

@enduml